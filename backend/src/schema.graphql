type Agent {
  id: ID!
  url: String!
  name: String
  description: String
  isLocal: Boolean!
  pid: Int # Process ID, only available for local agents
}

# --- Task Related Types ---

scalar JSONObject

enum TaskState {
  SUBMITTED
  WORKING
  INPUT_REQUIRED
  COMPLETED
  FAILED
  CANCELED
}

enum MessageRole {
  SYSTEM
  USER
  ASSISTANT
  TOOL
}

# Using JSONObject for Parts initially for simplicity
# interface Part {
#   type: String!
# }
# type TextPart implements Part {
#   type: String!
#   text: String!
# }
# type FilePart implements Part {
#   type: String!
#   mime_type: String!
#   uri: String
#   artifact_id: String
# }
# type DataPart implements Part {
#   type: String!
#   mime_type: String!
#   data: JSONObject!
# }

type Message {
  role: MessageRole!
  parts: [JSONObject!]! # Simplified to JSONObject for now
  toolCalls: JSONObject # Placeholder
  toolCallId: String
}

type Artifact {
  id: ID!
  type: String!
  filename: String
  # data is omitted for list view, fetched separately if needed
}

type Task {
  id: ID!
  state: TaskState!
  input: [Message!]
  output: [Message!]
  error: String
  createdAt: String! # Using String for ISO date format
  updatedAt: String! # Using String for ISO date format
  artifacts: JSONObject # Simplified to JSONObject mapping artifactId -> Artifact (without data)
}

# --- Log Streaming Types ---

scalar DateTime # Add scalar for timestamp

type LogEntry {
  timestamp: DateTime!
  stream: String! # "stdout" or "stderr"
  line: String!
}

# --- Queries, Mutations, and Subscriptions ---

type Query {
  agents: [Agent!]!
  agentLogs(agentId: ID!): [String!]
  listTasks(agentId: ID!): [Task!]! # Added query to list tasks for an agent
}

type Subscription {
  agentLogs(agentId: ID!): LogEntry! # Subscription for real-time logs
  taskUpdates(agentId: ID!, taskId: ID): Task! # Subscription for real-time task updates
}

type Mutation {
  addAgent(url: String!, name: String): Agent!
  removeAgent(id: ID!): Boolean!
  spawnKaAgent(model: String, systemPrompt: String, apiBaseUrl: String, port: Int, name: String, description: String): Agent!
  stopKaAgent(id: ID!): Boolean!
  createTask(
    agentId: ID # Optional: Specify agent directly
    sessionId: String # Optional session ID
    message: InputMessage! # The task message content
    pushNotification: JSONObject # Optional push notification config
    historyLength: Int # Optional history length
    metadata: JSONObject # Optional metadata
  ): Task! # Returns the initial task state
  deleteTask(agentId: ID!, taskId: ID!): Boolean!
  # Removed startWorkflow
  # Removed stopWorkflow
}

# --- Input Types ---

input InputPart {
  type: String! # e.g., 'text', 'file', 'data'
  # Use JSONObject for flexibility, mirroring the output types
  # Specific fields like 'text', 'file', 'data' would be inside this object
  content: JSONObject!
  metadata: JSONObject
}

input InputMessage {
  role: MessageRole!
  parts: [InputPart!]!
  metadata: JSONObject
}
